name: Playwright Tests
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  e2e:
    env:
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}

      PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}

      PLAYWRIGHT_BASE_URL: ${{ vars.PLAYWRIGHT_BASE_URL }}
      PLAYWRIGHT_USER_USERNAME: ${{ vars.PLAYWRIGHT_USER_USERNAME }}
      PLAYWRIGHT_USER_PASSWORD: ${{ vars.PLAYWRIGHT_USER_PASSWORD }}

      # SERVER_URL: ${{ vars.PLAYWRIGHT_SERVER_URL }}
      SERVER_URL: http://172.18.0.1:3000

    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start Docker Compose services
        run: |
          make run
        working-directory: .

      - name: Get Docker Compose Network
        run: |
          docker network inspect skidoodle_app-net

      - name: Health Check Endpoint
        run: |
          # Wait for the service to be ready (adjust sleep time as needed)
          sleep 30

          for i in {1..5}; do
            HTTP_STATUS=$(curl --silent --fail -o /dev/null --max-time 10 -w "%{http_code}" http://localhost:8080/health 2> /dev/null && echo "success" || echo "failed")
            if [[ "$HTTP_STATUS" == "200" ]]; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done
          echo "Health check failed after retries: HTTP status $HTTP_STATUS"
          exit 1
      - name: Run e2e tests
        working-directory: ./testing/e2e
        run: |
          npm ci
          npx playwright install
          npx playwright install-deps
          npx playwright test

      # - uses: actions/upload-artifact@v4
      #   if: ${{ !cancelled() }}
      #   with:
      #     name: playwright-report
      #     path: ./testing/e2e/playwright-report/
      #     retention-days: 30

      - name: Check Docker Compose Logs
        run: docker-compose logs

      - name: Stop Docker Compose services
        if: always() # Run even if previous steps fail
        run: |
          make destroy
        working-directory: .
