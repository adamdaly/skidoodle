name: Playwright Tests
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  e2e:
    env:
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}

      PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}

      SERVER_URL: ${{ vars.SERVER_URL }}
      CLIENT_SERVER_URL: ${{ vars.CLIENT_SERVER_URL }}
      DATABASE_URL: ${{ vars.DATABASE_URL }}

      PLAYWRIGHT_BASE_URL: ${{ vars.PLAYWRIGHT_BASE_URL }}
      PLAYWRIGHT_USER_USERNAME: ${{ vars.PLAYWRIGHT_USER_USERNAME }}
      PLAYWRIGHT_USER_PASSWORD: ${{ vars.PLAYWRIGHT_USER_PASSWORD }}

      AMPLIFY_APP_ORIGIN: ${{ vars.AMPLIFY_APP_ORIGIN }}
      AWS_FRAMES_RETRIEVE_URL: ${{ vars.AWS_FRAMES_RETRIEVE_URL }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_BUCKET: ${{ vars.AWS_BUCKET }}
      FRAMES_RETRIEVE_URL: ${{ vars.FRAMES_RETRIEVE_URL }}

      REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
      ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
      COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}

    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - name: Echo all variables
        run: |
          echo "All variables: ${{ toJSON(vars) }}"
        env:
          VARS_CONTEXT: ${{ toJSON(vars) }}

      - name: Echo all secrets
        run: |
          echo "All secrets: ${{ toJSON(secrets) }}"
        env:
          SECRETS_CONTEXT: ${{ toJSON(secrets) }}

      - name: Export variables to environment
        run: |
          echo "$VARS_CONTEXT" | jq -r 'to_entries[] | "\(.key)=\(.value)"' >> $GITHUB_ENV
        env:
          VARS_CONTEXT: ${{ toJSON(vars) }}

      - name: Verify exported variables
        run: |
          printenv | grep -v GITHUB_ | sort

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start Docker Compose services
        run: |
          make run-testing
        working-directory: .

      - name: Collect docker logs on failure
        if: failure()
        uses: jwalton/gh-docker-logs@v2
        with:
          dest: "./logs"
      - name: Tar logs
        if: failure()
        run: tar cvzf ./logs.tgz ./logs
      - name: Upload logs to GitHub
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: logs.tgz
          path: ./logs.tgz

      - name: Run e2e tests
        working-directory: ./testing/e2e
        run: |
          npm ci
          npx playwright install
          npx playwright install-deps
          npx playwright test

      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: ./testing/e2e/playwright-report/
          retention-days: 30

      - name: Stop Docker Compose services
        if: always() # Run even if previous steps fail
        run: |
          make destroy
        working-directory: .
