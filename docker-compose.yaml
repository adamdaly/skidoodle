services:
  db:
    container_name: skidoodle-db
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
  flyway:
    container_name: skidoodle-flyway
    image: flyway/flyway
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: -url=jdbc:postgresql://db/${POSTGRES_DB} -schemas=public -user=${POSTGRES_USER} -password=${POSTGRES_PASSWORD} -connectRetries=5 migrate
    volumes:
      - ./database:/flyway/sql
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-net
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-net
  server:
    container_name: skidoodle-server
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=${AWS_BUCKET}
      - DATABASE_URL=${DATABASE_URL}
      - COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - MONGO_URI=mongodb://admin:secretpassword@mongodb:27017/authdb?authSource=admin
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-net
  mongodb:
    container_name: mongodb
    build:
      context: ./auth-database
      dockerfile: Dockerfile
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secretpassword
    volumes:
      - mongodb-data:/data/db
    networks:
      - app-net
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "echo 'db.runCommand({ping:1}).ok' | mongosh --username admin --password secretpassword --authenticationDatabase admin --quiet",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  mongoadmin:
    container_name: mongoadmin
    image: mongo-express
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://admin:secretpassword@mongodb:27017/authdb?authSource=admin"
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: secretpassword
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: secretpassword
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "3001:8081"
    networks:
      - app-net
  auth-server:
    container_name: skidoodle-auth-server
    build:
      context: ./auth-server
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    volumes:
      - ./auth-server:/usr/src/app
      - /usr/src/app/dist
      - /usr/src/app/node_modules
    restart: unless-stopped
    environment:
      - PORT=3000
      - MONGO_URI=mongodb://admin:secretpassword@mongodb:27017/authdb?authSource=admin
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-net
  file-store:
    container_name: skidoodle-file-store
    build:
      context: ./file-store
      dockerfile: Dockerfile
    ports:
      - "3003:3000"
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app-net
    environment:
      - PORT=3000
  client:
    container_name: skidoodle-client
    build:
      context: ./client
      dockerfile: Dockerfile.local
    ports:
      - "3004:3000"
    volumes:
      - ./client/src:/usr/src/app/src
    depends_on:
      server:
        condition: service_healthy
    networks:
      - app-net
    environment:
      AMPLIFY_APP_ORIGIN: ${AMPLIFY_APP_ORIGIN}
      NEXT_PUBLIC_COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID}
      NEXT_PUBLIC_COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID}

networks:
  app-net:
    driver: bridge

volumes:
  db:
  pgadmin:
  mongodb-data:
